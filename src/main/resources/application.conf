akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logLevel = "DEBUG"
  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
  //    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  //  log-config-on-start = on

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    //provider = "akka.actor.LocalActorRefProvider"
    debug {
      receive = on
      lifecycle = on
    }
    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
      //        //      myown = "docs.serialization.MyOwnSerializer"
    }
    serialization-bindings {
      "java.io.Serializable" = java
      "com.google.protobuf.Message" = proto
      "com.trueaccord.scalapb.GeneratedMessage" = proto
    }

    serialize-messages = off

    deployment {
      default.cluster {
        # enable cluster aware router that deploys to nodes in the cluster
        enabled = on
        # Maximum number of routees that will be deployed on each cluster
        # member node.
        # Note that max-total-nr-of-instances defines total number of routees, but
        # number of routees per node will not be exceeded, i.e. if you
        # define max-total-nr-of-instances = 50 and max-nr-of-instances-per-node = 2
        # it will deploy 2 routees per new member in the cluster, up to
        # 25 members.
        max-nr-of-instances-per-node = 10000

        # Maximum number of routees that will be deployed, in total
        # on all nodes. See also description of max-nr-of-instances-per-node.
        # For backwards compatibility reasons, nr-of-instances
        # has the same purpose as max-total-nr-of-instances for cluster
        # aware routers and nr-of-instances (if defined by user) takes
        # precedence over max-total-nr-of-instances.
        max-total-nr-of-instances = 100000
      }

      //      /hotelAvailabilityRouter {
      //        router = round-robin-pool
      //        supervisorStrategy = restart
      //        nr-of-instances = 10
      //      }
      //      /databaseRouter {
      //        router = round-robin-pool
      //        supervisorStrategy = restart
      //        nr-of-instances = 50
      //      }

    }
  }

  remote {
//    maximum-payload-bytes = 30000000
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = ${profile.production.akka-info.remote.ip}
      port = ${profile.production.akka-info.remote.port}
//      message-frame-size =  30000000b
//      send-buffer-size =  30000000b
//      receive-buffer-size =  30000000b
//      maximum-frame-size = 30000000b
    }

  }

  cluster {
    seed-nodes = [
      "akka.tcp://availability-akka-cluster@127.0.0.1:2551"]
    //      "akka.tcp://availability-akka-cluster@127.0.0.1:2552"]

    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    #
    auto-down-unreachable-after = 120s

    # Disable legacy metrics in akka-cluster.
    metrics {
      enabled = on

      # Sigar native library extract location during tests.
      # Note: use per-jvm-instance folder when running multiple jvm on one host.
      native-library-extract-folder = ${user.dir}/target/native
    }
  }


  # Enable metrics extension in akka-cluster-metrics.
  extensions = ["akka.cluster.metrics.ClusterMetricsExtension"]
}


profile {

  production {
    http {
      interface = "0.0.0.0"
      port = 8085
    }

    db {
      cassandra {
        port: 9042
        hosts: ["192.168.59.121"]
        keyspace: bookstore
      }
    }

    akka-info {
      remote {
        ip = "127.0.0.1"
        port = 2551
      }

      cluster-name = bookstore-cluster-prod

      actor-timeout = 20

      node-backend = backend
      node-frontend = frontend
      node-cache = cache

      actor-total-instances = 50000
      wordcount-request-actor-total-instances = 100
      cache-actor-total-instances = 300
      db-actor-total-instances = 300
      datapump-coordinator-actor-total-instances = 50
      datapump-actor-total-instances = 10
    }

    hazelcast {
      seeds: ["127.0.0.1"]
    }

  }

  development {
    http {
      interface = "0.0.0.0"
      port = 8085
    }

    db {
      cassandra {
        port: 9042
        hosts: ["192.168.59.121"]
        keyspace: bookstore
      }
    }

    akka-info {
      ip = "127.0.0.1"
      port = 2551

      cluster-name = bookstore-cluster-dev

      actor-timeout = 400

      node-backend = backend
      node-frontend = frontend
      node-cache = cache

      actor-total-instances = 50
      wordcount-request-actor-total-instances = 100
      cache-actor-total-instances = 30
      db-actor-total-instances = 30
      datapump-coordinator-actor-total-instances = 50
      datapump-actor-total-instances = 10
    }

    hazelcast {
      seeds: ["127.0.0.1"]
    }

  }


}

